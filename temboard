#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, signal, os
import ssl

import tornado.ioloop
import tornado.web

from sqlalchemy import create_engine

from temboardui.handlers.base import *
from temboardui.handlers.user import *
from temboardui.handlers.home import *
from temboardui.handlers.notification import *
from temboardui.handlers.manage.user import *
from temboardui.handlers.manage.group import *
from temboardui.handlers.manage.instance import *

from temboardui.async import new_worker_pool
from temboardui.options import temboarduiOptions
from temboardui.configuration import Configuration
from temboardui.errors import ConfigurationError, CLIError
from temboardui.logger import get_logger, set_logger_name
from temboardui.daemon import daemonize, httpd_sigterm_handler, remove_pidfile
from temboardui.pluginsmgmt import load_plugins, plugins_bind_metadata
from temboardui.taskmanager import TaskManager

class CustomTornadoWebApp(tornado.web.Application):
    logger = None
    config = None
    loaded_plugins = []

    def set_logger(self, logger):
        self.logger = logger

    def set_config(self, config):
        self.config = config

    def load_plugins(self, plugin_names):
        plugins = load_plugins(plugin_names, self.config)
        plugins_conf = dict()
        self.loaded_plugins = []
        for key, val in plugins.iteritems():
            self.add_handlers(r'.*', val['routes'])
            plugins_conf[key] = val['configuration']
            if key not in self.loaded_plugins:
                self.loaded_plugins.append(key)
        return plugins_conf

    def log_request(self, handler):
        request_time = 1000.0 * handler.request.request_time()
        log_message = '%d %s %.2fms' % (handler.get_status(), handler._request_summary(), request_time)
        self.logger.info(log_message)

    def create_db_engine(self, pidfile):
        dburi = "postgresql://%s:%s@%s:%s/%s" % (
            self.config.repository['user'],
            self.config.repository['password'],
            self.config.repository['host'],
            self.config.repository['port'],
            self.config.repository['dbname']
        )
        self.engine = create_engine(dburi)
        try:
            conn = self.engine.connect()
        except Exception as e:
            self.logger.error("Connection to the database failed for the following reason:")
            self.logger.error("\t%s" % e.message)
            self.logger.error("Please check your configuration.")
            sys.stderr.write("FATAL: %s\n" % e.message)
            remove_pidfile(pidfile)
            exit(1)
        else:
            conn.close()

def main():
    optparser = temboarduiOptions(description = "temBoard UI/web client.")
    (options, _) = optparser.parse_args()
    # Load configuration from the configuration file.
    try:
        config =  Configuration(options.configfile)
        set_logger_name("temboard")
        logger = get_logger(config)
        logger.info("Starting main process.")
    except (ConfigurationError, ImportError) as e:
        try:
            logger.error(e.message)
        except Exception:
            pass
        sys.stderr.write("FATAL: %s\n" % e.message)
        exit(1)
    # Run temboard as a background daemon.
    if (options.daemon):
        daemonize(options.pidfile)
    # Dirty way for getting static/ and templates/ absolute paths.
    import temboardui
    base_path = os.path.dirname(temboardui.__file__)
    del temboardui

    # Worker pool creation.
    new_worker_pool(12)

    ssl_ctx = {
        'certfile': config.temboard['ssl_cert_file'],
        'keyfile': config.temboard['ssl_key_file']
    }
    handler_conf = {'ssl_ca_cert_file': config.temboard['ssl_ca_cert_file'], 'template_path': None}
    application = CustomTornadoWebApp(
        [
            (r"/", BaseHandler, handler_conf),
            (r"/home", HomeHandler, handler_conf),
            (r"/login", LoginHandler, handler_conf),
            (r"/json/login", LoginJsonHandler, handler_conf),
            (r"/logout", LogoutHandler, handler_conf),
            # Manage users
            (r"/manage/users", ManageUserHandler, handler_conf),
            (r"/json/manage/user$", ManageUserJsonHandler, handler_conf),
            (r"/json/manage/user/([0-9a-z\-_\.]{3,16})$", ManageUserJsonHandler, handler_conf),
            (r"/json/manage/delete/user$", ManageDeleteUserJsonHandler, handler_conf),
            (r"/json/manage/all/group/(role|instance)$", ManageGroupAllJsonHandler, handler_conf),
            # Manage groups (users & instances)
            (r"/manage/groups/(role|instance)$", ManageGroupHandler, handler_conf),
            (r"/json/manage/group/(role|instance)$", ManageGroupJsonHandler, handler_conf),
            (r"/json/manage/group/(role|instance)/([0-9a-z\-_\.]{3,16})$", ManageGroupJsonHandler, handler_conf),
            (r"/json/manage/delete/group/(role|instance)$", ManageDeleteGroupJsonHandler, handler_conf),
            # Manage instances
            (r"/manage/instances", ManageInstanceHandler, handler_conf),
            (r"/json/manage/instance$", ManageInstanceJsonHandler, handler_conf),
            (r"/json/register/instance$", RegisterInstanceJsonHandler, handler_conf),
            (r"/json/manage/instance/([0-9a-zA-Z\-\._:]+)/([0-9]{1,5})$", ManageInstanceJsonHandler, handler_conf),
            (r"/json/manage/delete/instance$", ManageDeleteInstanceJsonHandler, handler_conf),
            # Discover
            (r"/json/discover/instance/([0-9a-zA-Z\-\._:]+)/([0-9]{1,5})$", DiscoverInstanceJsonHandler, handler_conf),
            # Agent Login
            (r"/server/(.*)/([0-9]{1,5})/login", AgentLoginHandler, handler_conf),
            # Notifications
            (r"/server/(.*)/([0-9]{1,5})/notifications", NotificationsHandler, handler_conf),
            (r"/css/(.*)", tornado.web.StaticFileHandler, {'path': base_path+'/static/css'}),
            (r"/codemirror/(.*)", tornado.web.StaticFileHandler, {'path': base_path+'/static/codemirror'}),
            (r"/js/(.*)", tornado.web.StaticFileHandler, {'path': base_path+'/static/js'}),
            (r"/images/(.*)", tornado.web.StaticFileHandler, {'path': base_path+'/static/images'}),
            (r"/fonts/(.*)", tornado.web.StaticFileHandler, {'path': base_path+'/static/fonts'})
        ],
        cookie_secret = config.temboard['cookie_secret'],
        template_path = base_path+"/templates",
        default_handler_class = Error404Handler
    )
    application.set_config(config)
    application.set_logger(logger)
    config.plugins = application.load_plugins(config.temboard['plugins'])
    application.create_db_engine(options.pidfile)
    plugins_bind_metadata(application.engine, config.temboard['plugins_orm_engine'])
    # Add signal handlers on SIGTERM.
    signal.signal(signal.SIGTERM, httpd_sigterm_handler)
    application.listen(config.temboard['port'], address = config.temboard['address'], ssl_options = ssl_ctx)

    # Task Manager
    task_manager = TaskManager()
    task_manager.set_logger(logger)
    task_manager.task_list.filepath = os.path.join(config.temboard['home'], 'task_list')
    logger.info("Starting task manager.")
    task_manager.start(parameters = {'configpath': options.configfile})

    logger.info("Starting temboardui on %s:%d" % (config.temboard['address'], config.temboard['port']))
    tornado.ioloop.IOLoop.instance().start()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        sys.stderr.write("FATAL: %s\n" % e.message)
        import traceback
        exc_type, exc_value, exc_traceback = sys.exc_info()
        traceback.print_tb(exc_traceback)
        exit(1)
